GlideAjax Introduction
GlideAjax class enables a client script to call server-side code in a script include.

client-side
Used to call server-side Script includes
Similar to JQuery's ajax method

AJAX Asynchronous JavaScript and XML


Synchronous & Asynchronous

Synchronous
When you execute something synchronously, you wait for it to finish before moving on to another task. 

Synchronous basically means that you can only execute one thing at a time.

Asynchronous
When you execute something asynchronously, you can move on to another task before it finishes

Asynchronous means that you can execute multiple things at a time


Parameter "sysparm_name" is used to find the function of script include we want to execute.
When we have to give other Parameter then we should remember that it would be start with syspara.for e.g. sysparam_sendValue

Code in asynchronous GlideAjax is executed through getXML() function.

addparam() method is used with the parameters to execute the script include method and is used to provide values.








getLatestIncidents: function(num){
		var limit = num || 5;
		var results = [];
		var incidentGR = new GlideRecord('incident');
		incidentGR.orderByDesc('sys_created_on');
		incidentGR.setLimit(limit);
		incidentGR.query();
		while(incidentGR.next()){
			results.push(incidntGR.number.getDisplayValue());
			}
		return results;
	},

var incidents = new IncidentUtils().getLatestIncidents(10);
gs.print(incidents);


1)Query()

var gr=new GlideRecord('incident');
gr.query();Parameter "sysparm_name" is used  find the
while(gr.next()){
gs.addInfoMessage(gr.number);
}

If you check above example, I have used only query() so it will give you all records of table.

2)addQuery()


var gr=new GlideRecord('incident');
gr.addQuery('state','closed');
gr.query();
while(gr.next()){
gs.addInfoMessage(gr.number);
}

If you check above example, it will give those incident records who is having closed state only.

So that means you can add more appropriate filters to fetch data using addQuery().

Acess control List
Check
2952525212698 



1.	Activity Log 
STRY00010024
https://stanford.service-now.com/nav_to.do?uri=rm_story.do?sys_id=79fd19ae4f4f0200ac61433e0210c745%26sysparm_view=scrum
Status : Completed on 15.01.2022
 
2. User Type
STRY00010072
https://stanford.service-now.com/nav_to.do?uri=rm_story.do?sys_id=c2734bca4f4b0200ac61433e0210c7df%26sysparm_view=scrum
Status : Analysis in progress
 
3.	Chat
STRY00010016
https://stanford.service-now.com/nav_to.do?uri=rm_story.do?sys_id=b54a9dea4f4f0200ac61433e0210c773%26sysparm_view=scrum
Status : Analysis in progress


Analysis in progress
Implementation / Development in progress
Testing in progress
Completed.


4. Alternate Contact
STRY00010038
https://stanford.service-now.com/nav_to.do?uri=rm_story.do?sys_id=6d2075324f434200ac61433e0210c77b%26sysparm_view=scrum



type 3
https://www.youtube.com/watch?v=iYl9ZNVZUFk
https://www.youtube.com/watch?v=dW2wL12f7qw



Chat
https://www.youtube.com/watch?v=iYl9ZNVZUFk
https://www.youtube.com/watch?v=dW2wL12f7qw
https://www.youtube.com/watch?v=jc7FyaFz6Cw
https://www.youtube.com/watch?v=X-r4YXtUFwU